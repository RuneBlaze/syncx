"""DashMap-backed dictionary primitives."""

from __future__ import annotations

from typing import Generic, Optional, TypeVar

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")


class ConcurrentDict(Generic[_KT, _VT]):
    def __init__(self) -> None: ...

    def __len__(self) -> int: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: _KT) -> _VT: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    def __delitem__(self, key: _KT) -> None: ...

    def get(self, key: _KT, default: Optional[_VT] = None) -> Optional[_VT]: ...
    def setdefault(self, key: _KT, default: Optional[_VT] = None) -> _VT: ...
    def pop(self, key: _KT, default: Optional[_VT] = None) -> _VT: ...
    def clear(self) -> None: ...


__all__ = ["ConcurrentDict"]
