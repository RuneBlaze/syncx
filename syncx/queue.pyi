from __future__ import annotations

from typing import Generic, Optional, TypeVar

T = TypeVar("T")


class Empty(Exception):
    ...


class Full(Exception):
    ...


class Queue(Generic[T]):
    maxsize: int

    def __init__(self, maxsize: int = ...) -> None: ...
    def qsize(self) -> int: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    def put(self, item: T, block: bool = ..., timeout: Optional[float] = ...) -> None: ...
    def put_nowait(self, item: T) -> None: ...
    def get(self, block: bool = ..., timeout: Optional[float] = ...) -> T: ...
    def get_nowait(self) -> T: ...
    def __len__(self) -> int: ...


__all__ = ["Queue", "Empty", "Full"]
