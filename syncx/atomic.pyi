"""Atomics backed by Rust's atomic primitives and portable-atomic."""

from typing import Callable, Tuple

class AtomicInt:
    def __init__(self, value: int = 0) -> None: ...
    def load(self) -> int: ...
    def store(self, value: int) -> None: ...
    def add(self, value: int) -> int: ...
    def sub(self, value: int) -> int: ...
    def swap(self, value: int) -> int: ...
    def compare_exchange(self, current: int, new: int) -> Tuple[bool, int]: ...
    def mul(self, value: int) -> int: ...
    def div(self, value: int) -> int: ...
    def fetch_max(self, value: int) -> int: ...
    def fetch_min(self, value: int) -> int: ...
    def fetch_and(self, value: int) -> int: ...
    def fetch_or(self, value: int) -> int: ...
    def fetch_xor(self, value: int) -> int: ...
    def update(self, func: Callable[[int], int]) -> int: ...
    def inc(self) -> int: ...
    def dec(self) -> int: ...
    def __iadd__(self, value: int) -> "AtomicInt": ...
    def __isub__(self, value: int) -> "AtomicInt": ...
    def __imul__(self, value: int) -> "AtomicInt": ...
    def __idiv__(self, value: int) -> "AtomicInt": ...
    def __int__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __getstate__(self) -> int: ...
    def __setstate__(self, value: int) -> None: ...

class AtomicBool:
    def __init__(self, value: bool = False) -> None: ...
    def load(self) -> bool: ...
    def store(self, value: bool) -> None: ...
    def swap(self, value: bool) -> bool: ...
    def compare_exchange(self, current: bool, new: bool) -> Tuple[bool, bool]: ...
    def flip(self) -> bool: ...
    def fetch_and(self, value: bool) -> bool: ...
    def fetch_or(self, value: bool) -> bool: ...
    def fetch_xor(self, value: bool) -> bool: ...
    def update(self, func: Callable[[bool], bool]) -> bool: ...
    def __bool__(self) -> bool: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __getstate__(self) -> bool: ...
    def __setstate__(self, value: bool) -> None: ...

class AtomicFloat:
    def __init__(self, value: float = 0.0) -> None: ...
    def load(self) -> float: ...
    def store(self, value: float) -> None: ...
    def add(self, value: float) -> float: ...
    def sub(self, value: float) -> float: ...
    def swap(self, value: float) -> float: ...
    def compare_exchange(self, current: float, new: float) -> Tuple[bool, float]: ...
    def mul(self, value: float) -> float: ...
    def div(self, value: float) -> float: ...
    def fetch_max(self, value: float) -> float: ...
    def fetch_min(self, value: float) -> float: ...
    def update(self, func: Callable[[float], float]) -> float: ...
    def __float__(self) -> float: ...
    def __repr__(self) -> str: ...
    def __getstate__(self) -> float: ...
    def __setstate__(self, value: float) -> None: ...

__all__ = ["AtomicInt", "AtomicBool", "AtomicFloat"]
