"""Lock-aware collection primitives backed by Rust"""

from __future__ import annotations

from typing import Generic, Iterator, Optional, TypeVar

T = TypeVar("T")
KT = TypeVar("KT")
VT = TypeVar("VT")


class Empty(Exception):
    ...


class Full(Exception):
    ...


class Queue(Generic[T]):
    maxsize: int

    def __init__(self, maxsize: int = ...) -> None: ...
    def qsize(self) -> int: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    def put(self, item: T, block: bool = ..., timeout: Optional[float] = ...) -> None: ...
    def put_nowait(self, item: T) -> None: ...
    def get(self, block: bool = ..., timeout: Optional[float] = ...) -> T: ...
    def get_nowait(self) -> T: ...
    def __len__(self) -> int: ...


class ConcurrentDict(Generic[KT, VT]):
    def __init__(self) -> None: ...

    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, key: object) -> bool: ...
    def __iter__(self) -> Iterator[KT]: ...
    def __getitem__(self, key: KT) -> VT: ...
    def __setitem__(self, key: KT, value: VT) -> None: ...
    def __delitem__(self, key: KT) -> None: ...
    def get(self, key: KT, default: Optional[VT] = None) -> Optional[VT]: ...
    def setdefault(self, key: KT, default: Optional[VT] = None) -> VT: ...
    def pop(self, key: KT, default: Optional[VT] = None) -> VT: ...
    def clear(self) -> None: ...
    def __getstate__(self) -> dict[KT, VT]: ...
    def __setstate__(self, state: dict[KT, VT]) -> None: ...


class ConcurrentSet(Generic[T]):
    def __init__(self) -> None: ...

    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, value: object) -> bool: ...
    def __iter__(self) -> Iterator[T]: ...
    def add(self, value: T) -> None: ...
    def discard(self, value: T) -> None: ...
    def remove(self, value: T) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> ConcurrentSet[T]: ...
    def __getstate__(self) -> list[T]: ...
    def __setstate__(self, state: list[T]) -> None: ...


__all__ = [
    "ConcurrentDict",
    "ConcurrentSet",
    "Empty",
    "Full",
    "Queue",
]
