"""Wrappers around parking_lot locks with Python-friendly names."""

from typing import Optional

class Lock:
    def __init__(self) -> None: ...
    def acquire(self) -> "LockGuard": ...
    def lock(self) -> "LockGuard": ...
    def try_acquire(self) -> Optional["LockGuard"]: ...
    def try_lock(self) -> Optional["LockGuard"]: ...
    def locked(self) -> bool: ...
    def is_locked(self) -> bool: ...
    def __enter__(self) -> "Lock": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

class LockGuard:
    def release(self) -> None: ...
    def unlock(self) -> None: ...
    def __enter__(self) -> "LockGuard": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

class RLock:
    def __init__(self) -> None: ...
    def acquire(self) -> "RLockGuard": ...
    def lock(self) -> "RLockGuard": ...
    def try_acquire(self) -> Optional["RLockGuard"]: ...
    def try_lock(self) -> Optional["RLockGuard"]: ...
    def __enter__(self) -> "RLockGuard": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

class RLockGuard:
    def release(self) -> None: ...
    def unlock(self) -> None: ...
    def __enter__(self) -> "RLockGuard": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

class RWLock:
    def __init__(self) -> None: ...
    def acquire_read(self) -> "ReadGuard": ...
    def read_lock(self) -> "ReadGuard": ...
    def try_acquire_read(self) -> Optional["ReadGuard"]: ...
    def try_read_lock(self) -> Optional["ReadGuard"]: ...
    def acquire_write(self) -> "WriteGuard": ...
    def write_lock(self) -> "WriteGuard": ...
    def try_acquire_write(self) -> Optional["WriteGuard"]: ...
    def try_write_lock(self) -> Optional["WriteGuard"]: ...
    def is_locked(self) -> bool: ...
    def is_write_locked(self) -> bool: ...

class ReadGuard:
    def release(self) -> None: ...
    def unlock(self) -> None: ...
    def __enter__(self) -> "ReadGuard": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

class WriteGuard:
    def release(self) -> None: ...
    def unlock(self) -> None: ...
    def downgrade(self) -> Optional[ReadGuard]: ...
    def __enter__(self) -> "WriteGuard": ...
    def __exit__(self, exc_type, exc, tb) -> bool: ...

__all__ = [
    "Lock",
    "LockGuard",
    "RLock",
    "RLockGuard",
    "RWLock",
    "ReadGuard",
    "WriteGuard",
]
